# -*- coding: utf-8 -*-
"""IF4202_1301180050

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GT9r0XVJil8tAoSIVVKXtqN6gxL-3PS7
"""

import pandas as pd
import numpy as np
import csv
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn import preprocessing

"""# PEMBACAAN DATASET"""

data = pd.read_csv('Diabetes.csv')

"""# PRAPEMROSESAN DATA"""

scalar = MinMaxScaler()

data.describe(include='all')

data.isnull().sum()

data = scalar.fit_transform(data)

"""
# PEMBAGIAN DATA
"""

Training = []
o_Training = []
Test = []
o_Test = []

#Dataset Ke-1
aTrain = data[0:614, :-1]
a_Train = data[0:614, 8:]
     
aTest = data[614:, :-1]
a_Test = data[614:, 8:]

#Dataset Ke-2
bTrain = data[0:461, :-1]
b1Train = data[615:768, :-1]
bTrain = np.concatenate((bTrain, b1Train))

b_Train = data[0:461, 8:]
b1_Train = data[615:768, 8:]
b_Train = np.concatenate((b_Train, b1_Train))

bTest = data[462:614, :-1]
b_Test = data[462:614, 8:]

#Dataset Ke-3
cTrain = data[0:307, :-1]
c1Train = data[462:768, :-1]
cTrain = np.concatenate((cTrain, c1Train))

c_Train = data[0:307, 8:]
c1_Train = data[462:768, 8:]
c_Train = np.concatenate((c_Train, c1_Train))

cTest = data[308:461, :-1]
c_Test = data[308:461, 8:]

#Dataset Ke-4
dTrain = data[0:154, :-1]
d1Train = data[308:768, :-1]
dTrain = np.concatenate((dTrain, d1Train))

d_Train = data[0:154, 8:]
d1_Train = data[308:768, 8:]
d_Train = np.concatenate((d_Train, d1_Train))

dTest = data[155:307, :-1]
d_Test = data[155:307, 8:]

#Dataset Ke-5
eTrain = data[155:768, :-1]
e_Train = data[155:768, 8:]

eTest = data[0:154, :-1]
e_Test = data[0:154, 8:]

#Memasukkan Kedalam Array
Training.append(aTrain)
Training.append(bTrain)
Training.append(cTrain)
Training.append(dTrain)
Training.append(eTrain)

o_Training.append(a_Train)
o_Training.append(b_Train)
o_Training.append(c_Train)
o_Training.append(d_Train)
o_Training.append(e_Train)

Test.append(aTest)
Test.append(bTest)
Test.append(cTest)
Test.append(dTest)
Test.append(eTest)

o_Test.append(a_Test)
o_Test.append(b_Test)
o_Test.append(c_Test)
o_Test.append(d_Test)
o_Test.append(e_Test)

"""# PERHITUNGAN UKURAN JARAK"""

def getJarak(q, p):
  return np.sqrt(np.sum((q - p)**2))

def eucledian(i):
  tampung = []

  for x in range(len(Test[i])):
    temp = []
    for y in range(len(Training[i])):
      temp.append(getJarak(Test[i][x], Training[i][y]))
    tampung.append(temp)
  return tampung

"""# KLASIFIKASI KNN"""

def getBoolean(arraysample, x):
  arrayboolean = []
  for i in range(len(arraysample)):
    boolean = []
    for j in range(len(arraysample[i])):
      boolean.append(o_Test[x][j] == arraysample[i][j])
    arrayboolean.append(boolean)
  return arrayboolean

def getPresentase(arrayboolean):
  hasil = []
  for i in range(len(arrayboolean)):
    a = np.count_nonzero(arrayboolean[i])
    hasil.append(a / len(arrayboolean[i]))
  return hasil

"""# PEMILIHAN K TERBAIK"""

def getK(arraysorting, x):
  arraysample = []
  arrayk = []

  #Data Training(613) sebagai K
  for i in range(len(arraysorting[0])):
    sample = []
    #Data Test(154)
    for j in range(len(arraysorting)):
      one = 0
      zero = 0
      for k in range(1, i):
        if (arraysorting[j][k][0][0] == 1.0):
          one = one + 1
        else:
          zero = zero + 1
      if (one > zero):
        sample.append(1.0)
      else:
        sample.append(0.0)
    arraysample.append(sample)
  arrayboolean = getBoolean(arraysample, x)
  hasil = getPresentase(arrayboolean)
  for i in range(len(arraysorting[0])):
    arrayk.append(i)
  temp = list(sorted(zip(arrayk, hasil), key=lambda k:k[1], reverse=True))
  return temp[0]

def getKNN():
  result = []
  
  for a in range(len(Test)):
    result.append(eucledian(a))
  hasil = []
  for a in range(len(o_Training)):
    sample = []
    sorting = o_Training[a]
    arraysorting = []
    for b in range(len(result[a])):
      temp = list(sorted(zip(sorting, result[a][b]), key=lambda k:k[1], reverse=False))
      arraysorting.append(temp)
    hasil.append(getK(arraysorting, a))
  return hasil

"""# PERHITUNGAN AKURASI"""

hasilpresentase = getKNN()
final = 0
for i in range(len(hasilpresentase)):
	print("Dataset Ke-", i+1)
	print("K : ", hasilpresentase[i][0], " Akurasi : ", hasilpresentase[i][1]*100)
	final = final + hasilpresentase[i][1]*100
print("")
print("Rata-Rata Akurasi : ", final/5)